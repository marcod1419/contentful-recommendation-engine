'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.aliases = exports.desc = exports.command = undefined;
exports.spaceUse = spaceUse;

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _contentfulClients = require('../../utils/contentful-clients');

var _context = require('../../context');

var _assertions = require('../../utils/assertions');

var _async = require('../../utils/async');

var _log = require('../../utils/log');

var _pagination = require('../../utils/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

var _styles = require('../../utils/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'use';

const desc = exports.desc = 'Sets the default space which every command will use when the --space-id option is skipped.';

const aliases = exports.aliases = ['u'];

const builder = exports.builder = yargs => {
  return yargs.usage('Usage: contentful space use').option('space-id', {
    alias: 's',
    describe: 'ID of the Space to use for other commands'
  }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

function showSuccess(space) {
  (0, _log.success)(`Now using the 'master' Environment of Space ${(0, _styles.highlightStyle)(space.name)} (${(0, _styles.highlightStyle)(space.sys.id)}) when the \`--space-id\` option is missing.`);
}

async function spaceUse(argv) {
  await (0, _assertions.assertLoggedIn)(argv);

  const context = await (0, _context.getContext)();
  const { cmaToken } = context;
  const spaceId = argv.spaceId;

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: cmaToken,
    feature: 'space-use'
  });

  if (spaceId) {
    const space = await client.getSpace(spaceId);
    await (0, _context.setContext)({
      activeSpaceId: space.sys.id,
      activeEnvironmentId: 'master'
    });

    await (0, _context.storeRuntimeConfig)();

    showSuccess(space);

    return space;
  }

  const spacesResult = await (0, _pagination2.default)({ client, method: 'getSpaces' });
  const spaceChoices = spacesResult.items.sort((a, b) => a.name.localeCompare(b.name)).map(space => ({
    name: `${space.name} (${space.sys.id})`,
    value: space.sys.id
  }), {}).concat([new _inquirer2.default.Separator()]);

  const answersSpaceSelection = await _inquirer2.default.prompt([{
    type: 'list',
    name: 'spaceId',
    message: 'Please select a space:',
    choices: spaceChoices
  }]);

  const space = await client.getSpace(answersSpaceSelection.spaceId);

  await (0, _context.setContext)({
    activeSpaceId: space.sys.id,
    activeEnvironmentId: 'master'
  });

  await (0, _context.storeRuntimeConfig)();

  showSuccess(space);

  return space;
}

const handler = exports.handler = (0, _async.handleAsyncError)(spaceUse);