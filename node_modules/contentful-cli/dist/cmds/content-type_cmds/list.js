'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.aliases = exports.desc = exports.command = undefined;

var _cliTable = require('cli-table3');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _context = require('../../context');

var _contentfulClients = require('../../utils/contentful-clients');

var _assertions = require('../../utils/assertions');

var _async = require('../../utils/async');

var _log = require('../../utils/log');

var _pagination = require('../../utils/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

var _styles = require('../../utils/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'list';

const desc = exports.desc = 'List your content types';

const aliases = exports.aliases = ['ls'];

const builder = exports.builder = yargs => {
  return yargs.option('space-id', { alias: 's', type: 'string', describe: 'Space id' }).option('management-token', {
    alias: 'mt',
    type: 'string',
    describe: 'Contentful management API token'
  }).option('environment-id', {
    alias: 'e',
    type: 'string',
    describe: 'Environment ID you want to interact with. Defaults to the current active environment.'
  }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

async function ctList(argv) {
  await (0, _assertions.assertLoggedIn)(argv);
  await (0, _assertions.assertSpaceIdProvided)(argv);

  const { cmaToken, activeSpaceId, activeEnvironmentId } = await (0, _context.getContext)();
  const managementToken = argv.managementToken || cmaToken;
  const spaceId = argv.spaceId || activeSpaceId;
  const environmentId = argv.environmentId || activeEnvironmentId || 'master';

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature: 'content_type-list'
  });

  const space = await client.getSpace(spaceId);
  const environment = await space.getEnvironment(environmentId);

  (0, _log.log)((0, _styles.highlightStyle)(`Environment: "${environmentId}"`));

  const result = await (0, _pagination2.default)({
    client: environment,
    method: 'getContentTypes',
    query: {
      order: 'name,sys.id'
    }
  });

  const table = new _cliTable2.default({
    head: ['Content Type Name', 'Content Type ID']
  });

  result.items.forEach(contentType => {
    table.push([contentType.name, contentType.sys.id]);
  });

  (0, _log.log)(table.toString());
}

const handler = exports.handler = (0, _async.handleAsyncError)(ctList);