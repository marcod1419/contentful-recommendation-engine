"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
class Fields {
    constructor(fields = []) {
        this._fields = fields;
    }
    getField(id) {
        return lodash_1.find(this._fields, { id });
    }
    setField(id, field) {
        const allFields = this.fields;
        const currentFieldIndex = allFields.findIndex((field) => field.id === id);
        if (currentFieldIndex === -1) {
            allFields.push(field);
        }
        else {
            allFields[currentFieldIndex] = field;
        }
        this._fields = allFields;
    }
    deleteField(id) {
        const fieldToDelete = lodash_1.find(this._fields, { id });
        lodash_1.pull(this._fields, fieldToDelete);
    }
    moveField(id, direction, pivot) {
        const fields = this._fields;
        const field = this.getField(id);
        lodash_1.pull(fields, field);
        if (direction === 'toTheTop') {
            fields.unshift(field);
        }
        if (direction === 'toTheBottom') {
            fields.push(field);
        }
        const pivotIndex = lodash_1.findIndex(fields, { id: pivot });
        if (direction === 'afterField') {
            fields.splice(pivotIndex + 1, 0, field);
        }
        if (direction === 'beforeField') {
            fields.splice(pivotIndex, 0, field);
        }
    }
    filter(predicate) {
        return lodash_1.filter(this._fields, predicate);
    }
    map(mapper) {
        return this._fields.map(mapper);
    }
    get fields() {
        return this._fields;
    }
    set fields(fields) {
        this._fields = fields;
    }
    clone() {
        return new Fields(this.toRaw());
    }
    toRaw() {
        return lodash_1.cloneDeep(this.fields);
    }
}
exports.Fields = Fields;
class EditorInterfaces {
    constructor(apiEditorInterfaces) {
        this._version = apiEditorInterfaces.sys.version;
        this._controls = apiEditorInterfaces.controls;
    }
    get version() {
        return this._version;
    }
    set version(version) {
        this._version = version;
    }
    reset(fieldId) {
        let controlIndex = lodash_1.findIndex(this._controls, (c) => {
            return c.fieldId === fieldId;
        });
        if (controlIndex !== -1) {
            this._controls.splice(controlIndex, 1);
        }
    }
    copy(fromFieldId, toFieldId) {
        let control = lodash_1.find(this._controls, (c) => {
            return c.fieldId === fromFieldId;
        });
        if (control) {
            this.update(toFieldId, control.widgetId, control.settings);
        }
    }
    update(fieldId, widgetId, settings) {
        let control = lodash_1.find(this._controls, (c) => {
            return c.fieldId === fieldId;
        });
        if (!control) {
            control = {
                fieldId: fieldId,
                widgetId: widgetId
            };
            control.fieldId = fieldId;
            this._controls.push(control);
        }
        control.widgetId = widgetId;
        if (settings) {
            lodash_1.forEach(settings, (v, k) => {
                control.settings = control.settings || {};
                control.settings[k] = v;
            });
        }
    }
    toAPI() {
        let result = [];
        lodash_1.forEach(this._controls, (c) => {
            result.push({
                fieldId: c.fieldId,
                widgetId: c.widgetId,
                settings: c.settings
            });
        });
        return {
            controls: result
        };
    }
}
exports.EditorInterfaces = EditorInterfaces;
class ContentType {
    constructor(ct) {
        this._id = ct.sys.id;
        this._fields = new Fields(ct.fields);
        this._name = ct.name;
        this._description = ct.description;
        this._version = ct.sys.version;
        this._displayField = ct.displayField;
    }
    get id() {
        return this._id;
    }
    get fields() {
        return this._fields;
    }
    set fields(fields) {
        this._fields = fields;
    }
    get name() {
        return this._name;
    }
    set name(name) {
        this._name = name;
    }
    get description() {
        return this._description;
    }
    set description(description) {
        this._description = description;
    }
    get displayField() {
        return this._displayField;
    }
    set displayField(displayField) {
        this._displayField = displayField;
    }
    get version() {
        return this._version;
    }
    set version(version) {
        this._version = version;
    }
    toAPI() {
        return {
            sys: {
                id: this.id,
                version: this.version
            },
            name: this.name,
            displayField: this.displayField,
            fields: this.fields.toRaw(),
            description: this.description
        };
    }
    clone() {
        return new ContentType(this.toAPI());
    }
}
exports.default = ContentType;
exports.ContentType = ContentType;
//# sourceMappingURL=content-type.js.map