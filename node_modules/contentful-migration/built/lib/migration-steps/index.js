'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const Bluebird = require("bluebird");
const action_creators_1 = require("./action-creators");
const getFirstExternalCaller = require("./first-external-caller");
const dispatch_proxy_1 = require("./dispatch-proxy");
const lodash_1 = require("lodash");
const createInstanceIdManager = () => {
    const instanceCounts = {};
    return {
        getNew: (id) => {
            let instanceId;
            if ((typeof instanceCounts[id]) === 'undefined') {
                instanceId = 0;
            }
            else {
                instanceId = instanceCounts[id] + 1;
            }
            instanceCounts[id] = instanceId;
            return instanceId;
        }
    };
};
class Movement extends dispatch_proxy_1.default {
}
class Field extends dispatch_proxy_1.default {
    constructor(id, props = {}, { dispatchUpdate }) {
        super({ dispatchUpdate });
        this.id = id;
        // Initialize from second argument
        Object.keys(props).forEach((propertyName) => {
            this[propertyName](props[propertyName]);
        });
    }
}
class ContentType extends dispatch_proxy_1.default {
    constructor(id, instanceId, props = {}, dispatch) {
        const dispatchUpdate = (callsite, propertyName, propertyValue) => {
            dispatch(action_creators_1.default.contentType.update(id, instanceId, callsite, propertyName, propertyValue));
        };
        super({ dispatchUpdate });
        this.id = id;
        this.instanceId = instanceId;
        this.dispatch = dispatch;
        this.fieldInstanceIds = createInstanceIdManager();
        // Initialize from pros
        Object.keys(props).forEach((propertyName) => {
            this[propertyName](props[propertyName]);
        });
    }
    createField(id, init) {
        const callsite = getFirstExternalCaller();
        const fieldInstanceId = this.fieldInstanceIds.getNew(id);
        this.dispatch(action_creators_1.default.field.create(this.id, this.instanceId, id, fieldInstanceId, callsite));
        const updateField = action_creators_1.default.field.update.bind(null, this.id, this.instanceId, id, fieldInstanceId);
        const field = new Field(id, init, {
            dispatchUpdate: (callsite, property, value) => {
                return this.dispatch(updateField(callsite, property, value));
            }
        });
        return field;
    }
    editField(id, init) {
        const fieldInstanceId = this.fieldInstanceIds.getNew(id);
        const updateField = action_creators_1.default.field.update.bind(null, this.id, this.instanceId, id, fieldInstanceId);
        const field = new Field(id, init, {
            dispatchUpdate: (callsite, property, value) => {
                return this.dispatch(updateField(callsite, property, value));
            }
        });
        return field;
    }
    moveField(id) {
        const fieldInstanceId = this.fieldInstanceIds.getNew(id);
        const contentTypeId = this.id;
        const contentTypeInstanceId = this.instanceId;
        const movement = new Movement({
            dispatchUpdate: (callsite, property, value) => {
                const action = action_creators_1.default.field.move(contentTypeId, contentTypeInstanceId, id, fieldInstanceId, callsite, { direction: property, pivot: value });
                this.dispatch(action);
            }
        });
        return movement;
    }
    deleteField(id) {
        const callsite = getFirstExternalCaller();
        const fieldInstanceId = this.fieldInstanceIds.getNew(id);
        this.dispatch(action_creators_1.default.field.delete(this.id, this.instanceId, id, fieldInstanceId, callsite));
    }
    changeFieldId(oldId, newId) {
        const callsite = getFirstExternalCaller();
        const fieldInstanceId = this.fieldInstanceIds.getNew(oldId);
        this.dispatch(action_creators_1.default.field.rename(this.id, this.instanceId, oldId, fieldInstanceId, callsite, newId));
    }
    changeEditorInterface(fieldId, widgetId, settings) {
        const callsite = getFirstExternalCaller();
        this.dispatch(action_creators_1.default.contentType.changeEditorInterface(this.id, this.instanceId, callsite, fieldId, widgetId, settings));
        return this;
    }
    copyEditorInterface(sourceFieldId, destinationFieldId) {
        const callsite = getFirstExternalCaller();
        this.dispatch(action_creators_1.default.contentType.copyEditorInterface(this.id, this.instanceId, callsite, sourceFieldId, destinationFieldId));
        return this;
    }
    resetEditorInterface(fieldId) {
        const callsite = getFirstExternalCaller();
        this.dispatch(action_creators_1.default.contentType.resetEditorInterface(this.id, this.instanceId, callsite, fieldId));
        return this;
    }
}
async function migration(migrationCreator, makeRequest, config) {
    const actions = [];
    const instanceIdManager = createInstanceIdManager();
    const dispatch = (action) => actions.push(action);
    const migration = {
        createContentType: function (id, init) {
            const callsite = getFirstExternalCaller();
            const instanceId = instanceIdManager.getNew(id);
            dispatch(action_creators_1.default.contentType.create(id, instanceId, callsite));
            return new ContentType(id, instanceId, init, dispatch);
        },
        editContentType: function (id, changes) {
            const instanceId = instanceIdManager.getNew(id);
            const ct = new ContentType(id, instanceId, changes, dispatch);
            return ct;
        },
        deleteContentType: function (id) {
            const callsite = getFirstExternalCaller();
            const instanceId = instanceIdManager.getNew(id);
            dispatch(action_creators_1.default.contentType.delete(id, instanceId, callsite));
        },
        transformEntries: function (transformation) {
            const callsite = getFirstExternalCaller();
            const id = transformation.contentType;
            const stripped = lodash_1.omit(transformation, 'contentType');
            const instanceId = instanceIdManager.getNew(id);
            dispatch(action_creators_1.default.contentType.transformEntries(id, instanceId, stripped, callsite));
        },
        deriveLinkedEntries: function (transformation) {
            const callsite = getFirstExternalCaller();
            const id = transformation.contentType;
            const stripped = lodash_1.omit(transformation, 'contentType');
            const instanceId = instanceIdManager.getNew(id);
            dispatch(action_creators_1.default.contentType.deriveLinkedEntries(id, instanceId, stripped, callsite));
        },
        transformEntriesToType: function (transformation) {
            const callsite = getFirstExternalCaller();
            const stripped = lodash_1.omit(transformation, 'contentType');
            const instanceId = instanceIdManager.getNew(transformation.sourceContentType);
            dispatch(action_creators_1.default.contentType.transformEntriesToType(instanceId, stripped, callsite));
        }
    };
    // Create the migration
    await Bluebird.try(function () {
        return migrationCreator(migration, Object.assign({ makeRequest }, config));
    });
    return actions;
}
exports.migration = migration;
//# sourceMappingURL=index.js.map