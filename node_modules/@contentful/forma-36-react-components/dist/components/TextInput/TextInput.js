"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextInput = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CopyButton = _interopRequireDefault(require("../CopyButton"));

var styles = {
  "TextInput": "TextInput__TextInput___36-K-",
  "TextInput__input": "TextInput__TextInput__input___27vDB a11y__focus-border--default___60AXp",
  "TextInput--small": "TextInput__TextInput--small___19AFQ",
  "TextInput--medium": "TextInput__TextInput--medium___1bR2D",
  "TextInput--large": "TextInput__TextInput--large___KwY4O",
  "TextInput--full": "TextInput__TextInput--full___1EJEW",
  "TextInput--disabled": "TextInput__TextInput--disabled___2t7VS",
  "TextInput--negative": "TextInput__TextInput--negative___iVq__",
  "TextInput__copy-button": "TextInput__TextInput__copy-button___3Sy2W"
};

var TextInput =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(TextInput, _Component);

  function TextInput() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, TextInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TextInput)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      value: _this.props.value
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFocus", function (e) {
      if (_this.props.disabled) {
        e.target.select();
      }
    });
    return _this;
  }

  (0, _createClass2.default)(TextInput, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        this.setState({
          value: nextProps.value
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _cn,
          _this2 = this;

      var _this$props = this.props,
          extraClassNames = _this$props.extraClassNames,
          withCopyButton = _this$props.withCopyButton,
          placeholder = _this$props.placeholder,
          maxLength = _this$props.maxLength,
          disabled = _this$props.disabled,
          required = _this$props.required,
          onChange = _this$props.onChange,
          testId = _this$props.testId,
          onBlur = _this$props.onBlur,
          onCopy = _this$props.onCopy,
          error = _this$props.error,
          width = _this$props.width,
          value = _this$props.value,
          type = _this$props.type,
          name = _this$props.name,
          id = _this$props.id,
          inputRef = _this$props.inputRef,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, ["extraClassNames", "withCopyButton", "placeholder", "maxLength", "disabled", "required", "onChange", "testId", "onBlur", "onCopy", "error", "width", "value", "type", "name", "id", "inputRef"]);
      var widthClass = "TextInput--".concat(width);
      var classNames = (0, _classnames.default)(styles['TextInput'], extraClassNames, styles[widthClass], (_cn = {}, (0, _defineProperty2.default)(_cn, styles['TextInput--disabled'], disabled), (0, _defineProperty2.default)(_cn, styles['TextInput--negative'], error), _cn));
      return _react.default.createElement("div", {
        className: classNames
      }, _react.default.createElement("input", (0, _extends2.default)({
        "aria-label": name,
        className: styles['TextInput__input'],
        id: id,
        name: name,
        required: required,
        placeholder: placeholder,
        maxLength: maxLength,
        "data-test-id": testId,
        disabled: disabled,
        onBlur: onBlur,
        onFocus: this.handleFocus,
        onChange: function (_onChange) {
          function onChange(_x) {
            return _onChange.apply(this, arguments);
          }

          onChange.toString = function () {
            return _onChange.toString();
          };

          return onChange;
        }(function (e) {
          if (disabled) return;

          if (onChange) {
            onChange(e);
          }

          _this2.setState({
            value: e.target.value
          });
        }),
        value: this.state.value,
        type: type,
        ref: inputRef
      }, otherProps)), withCopyButton && _react.default.createElement(_CopyButton.default, {
        onCopy: onCopy,
        copyValue: this.state.value,
        extraClassNames: styles['TextInput__copy-button']
      }));
    }
  }]);
  return TextInput;
}(_react.Component);

exports.TextInput = TextInput;
TextInput.displayName = "TextInput";
(0, _defineProperty2.default)(TextInput, "propTypes", {
  width: _propTypes.default.oneOf(['small', 'medium', 'large', 'full']),
  type: _propTypes.default.oneOf(['text', 'password', 'email', 'number', 'search', 'url']),
  name: _propTypes.default.string,
  id: _propTypes.default.string,
  extraClassNames: _propTypes.default.string,
  withCopyButton: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  onChange: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  testId: _propTypes.default.string,
  maxLength: _propTypes.default.number,
  onBlur: _propTypes.default.func,
  onCopy: _propTypes.default.func,
  value: _propTypes.default.string,
  inputRef: _propTypes.default.any,
  error: _propTypes.default.bool,
  required: _propTypes.default.bool
});
(0, _defineProperty2.default)(TextInput, "defaultProps", {
  name: undefined,
  id: undefined,
  extraClassNames: undefined,
  placeholder: undefined,
  withCopyButton: false,
  maxLength: undefined,
  onChange: undefined,
  onBlur: undefined,
  onCopy: undefined,
  testId: 'cf-ui-text-input',
  value: undefined,
  error: undefined,
  type: undefined,
  disabled: false,
  required: false,
  width: 'full'
});
var _default = TextInput;
exports.default = _default;