import React, { Component } from 'react';
export interface TooltipContainerProps {
    children: React.ReactNode;
    setRef: Function;
    containerElement: any;
    targetWrapperClassName?: string;
    onMouseLeave: Function;
    onMouseOver: Function;
    onFocus: Function;
    onBlur: Function;
}
export interface TooltipProps {
    targetWrapperClassName?: string;
    onFocus?: Function;
    onBlur?: Function;
    id?: string;
    onMouseLeave?: Function;
    containerElement?: React.ReactNode;
    onMouseOver?: Function;
    content?: React.ReactNode;
    children: React.ReactNode;
    place?: 'top' | 'bottom' | 'right' | 'left';
    isVisible?: boolean;
    maxWidth?: number | string;
    extraClassNames?: string;
    testId?: string;
}
export declare class Tooltip extends Component<TooltipProps> {
    static defaultProps: {
        onFocus: () => void;
        onBlur: () => void;
        onMouseLeave: () => void;
        onMouseOver: () => void;
        containerElement: string;
        isVisible: boolean;
        testId: string;
        place: string;
        maxWidth: number;
    };
    portalTarget: any;
    place: any;
    containerDomNode: any;
    tooltipDomNode: any;
    constructor(props: any);
    state: {
        isVisible: boolean;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    setPlace: (place: any) => void;
    calculatePosition: () => {};
    renderTooltip: (content: any) => any;
    render(): JSX.Element;
}
export default Tooltip;
