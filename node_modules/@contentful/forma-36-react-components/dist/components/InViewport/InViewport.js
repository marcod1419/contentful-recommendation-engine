"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InViewport = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _isBrowser = _interopRequireDefault(require("../../utils/isBrowser"));

var _throttle = _interopRequireDefault(require("../../utils/throttle"));

var styles = {
  "InViewport": "InViewport__InViewport___2o6g4"
};

var InViewport =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(InViewport, _Component);

  function InViewport() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, InViewport);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(InViewport)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tGetDomPosition", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "nodeRef", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDomPosition", function () {
      if (_isBrowser.default) {
        var html = document.documentElement;

        var boundingClientRect = _this.nodeRef.getBoundingClientRect();

        var windowWidth = window.innerWidth || html.clientWidth;
        var windowHeight = window.innerHeight || html.clientHeight;

        _this.handleOverflow(boundingClientRect, windowWidth, windowHeight);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindEventListeners", function () {
      _this.tGetDomPosition = (0, _throttle.default)(600, _this.getDomPosition);

      if (_isBrowser.default) {
        window.addEventListener('scroll', _this.tGetDomPosition, true);
        window.addEventListener('resize', _this.tGetDomPosition);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOverflow", function (_ref, windowWidth, windowHeight) {
      var top = _ref.top,
          left = _ref.left,
          bottom = _ref.bottom,
          right = _ref.right;
      var _this$props = _this.props,
          offset = _this$props.offset,
          onOverflowTop = _this$props.onOverflowTop,
          onOverflowLeft = _this$props.onOverflowLeft,
          onOverflowBottom = _this$props.onOverflowBottom,
          onOverflowRight = _this$props.onOverflowRight;
      var topThreshold = 0 - offset;
      var leftThreshold = 0 - offset;
      var rightThreshold = windowWidth + offset;
      var bottomThreshold = windowHeight + offset;

      if (top + right + bottom + left !== 0) {
        if (top < topThreshold) {
          onOverflowTop();
        } else if (left < leftThreshold) {
          onOverflowLeft();
        } else if (bottom > bottomThreshold) {
          onOverflowBottom();
        } else if (right > rightThreshold) {
          onOverflowRight();
        }
      }
    });
    return _this;
  }

  (0, _createClass2.default)(InViewport, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.getDomPosition();
      this.bindEventListeners();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.getDomPosition();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (_isBrowser.default) {
        window.removeEventListener('scroll', this.tGetDomPosition, true);
        window.removeEventListener('resize', this.tGetDomPosition);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          extraClassNames = _this$props2.extraClassNames,
          children = _this$props2.children,
          testId = _this$props2.testId,
          onOverflowBottom = _this$props2.onOverflowBottom,
          onOverflowLeft = _this$props2.onOverflowLeft,
          onOverflowRight = _this$props2.onOverflowRight,
          onOverflowTop = _this$props2.onOverflowTop,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props2, ["extraClassNames", "children", "testId", "onOverflowBottom", "onOverflowLeft", "onOverflowRight", "onOverflowTop"]);
      var classNames = (0, _classnames.default)(styles['InViewport'], extraClassNames);
      return _react.default.createElement("div", (0, _extends2.default)({
        ref: function ref(_ref2) {
          _this2.nodeRef = _ref2;
        },
        className: classNames,
        "data-test-id": testId
      }, otherProps), children);
    }
  }]);
  return InViewport;
}(_react.Component);

exports.InViewport = InViewport;
InViewport.displayName = "InViewport";
(0, _defineProperty2.default)(InViewport, "propTypes", {
  extraClassNames: _propTypes.default.string,
  children: _propTypes.default.node,
  testId: _propTypes.default.string,
  offset: _propTypes.default.number,
  onOverflowTop: _propTypes.default.any,
  onOverflowRight: _propTypes.default.any,
  onOverflowBottom: _propTypes.default.any,
  onOverflowLeft: _propTypes.default.any
});
(0, _defineProperty2.default)(InViewport, "defaultProps", {
  testId: 'cf-ui-in-viewport',
  offset: 0,
  onOverflowTop: function onOverflowTop() {},
  onOverflowRight: function onOverflowRight() {},
  onOverflowBottom: function onOverflowBottom() {},
  onOverflowLeft: function onOverflowLeft() {}
});
var _default = InViewport;
exports.default = _default;